EPlurum is an eso-lang designed to play with multi-core asymmetric
parallelism. Each type runs on its own processor, has a boolean FALSE
representation, and messages can be sent between processors. 

It was inspired by the x87 FPU coprocessor and Sega Saturn having
eight processors with differing abilities on all but the main
pair. Thoughts of what purely computational coprocessors might
be useful. 


Proto-types:
	Integer
	String
	Real
	Stdio

It has a quasi-stack structure; any variable can be referenced relative 
to the stack pointer, absolutely or the lowest 26 can be named as 
lower-case Latin letters,

type A is Integer;

Each processor has 
	accept x
		read top element of message queue, store it in x
		this blocks if the queue is empty
	accept_with_return x
		accept x, but also store return address on return stack
		this blocks if the queue is empty 
	accept_from x, type
		accept x but search queue for first message from type
		this blocks if the queue is empty
	send x, type
		send x to processor of type, converting it as appropriate
	send_as_boolean x, type
		send x, converting it to boolean
	return x
		send x to top of return stack, popping that
	return_as_boolean x
		return x after converting to boolean
	bumpsp n
		add n to the stack pointer, making that much more stack 
		available. This is theoretically filled with random
		data, possibly trapping representations
	dropsp n
		subtract n from the stack pointer
	if_goto a, tag
		if a is true, jump to tag
	goto tag
		jump to tag
	exit
		stops the processor; it is undefined what happens
		if a message is sent to this processor

	empty
		pseudo-register indicating the message queue is empty
	includes(type)
		builtin function indicating the message queue includes
		a message from type 
	<<tag>>
		label tag for goto target

An Integer type processor has
	add a, b, c (c = a + b)
	sub a, b, c (c = a - b)
	times a, b, c (c = a * b)
	divides a, b, c (c = a / b, with b == 0 being undefined)
	gt, lt, eq, gte, lte
	and, or, xor, not
	andb, orb, xorb
(though probably in a C or Ada, more usable fashion)

A Stdio type processor is a String processor with 
	readln x
	println x 

All processors start at the start of the program and run concurrently.

-- 99 bottles of beer on the wall, with running floating point volume
type Count is Integer begin
	add 99, 0, a
	<<loop>>
	send a, Beer
	sub a, 1, a
	eq a, 0, b
	if_goto b, loop
	exit
end
-- Volume is independent of Count to reduce syncing
type Volume is Real begin
	add 0.355, 0, a
	<<loop>>
	send a, Beer
	add 0.355, a, a
	lt a, 360.0, b -- will oversend a couple messages
	if_goto b, loop
	exit
end
-- This is basically a main function, though as all
-- types it starts at the start of the program
-- Could read count from stdin
type Beer is Stdio begin
	<<loop>>
	accept_from a, Count
	accept_from b, Volume
	concat a, " bottles of beer on the wall", c
	println c
	println c
	println "Take one down, pass it around"
	concat b, " liters of beer drunk", c
	println c
	println ""
	neq a, "1", d
	if_goto d, loop
	exit
	

Array extension

	Array of type (not proto-type)
	type B is Array of A;
	Add to all processors:
	send_as_array (x, type)
		send x, converting it to one element array of x

